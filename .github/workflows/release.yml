name: Release

on:
  workflow_call:
    inputs:
      targets-config:
        required: true
        type: string
      system-preparation:
        type: string
        required: false
    secrets:
      CRATES_IO_TOKEN:
        required: true

jobs:
  vars:
    name: Vars
    runs-on: ubuntu-latest
    outputs:
      tags: ${{ steps.set-targets.outputs.tags }}
      targets: ${{ steps.set-targets.outputs.targets }}
      targets_per_tags: ${{ steps.set-targets.outputs.targets_per_tags }}
      workspaces: ${{ steps.set-workspaces.outputs.workspaces }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout rust-workflows
        uses: actions/checkout@v4
        with:
          repository: FloGa/rust-workflows
          ref: develop
          path: .__rust-workflows__

      - id: set-targets
        run: ./.__rust-workflows__/.github/scripts/create-release-matrix '${{ inputs.targets-config }}'

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - id: set-workspaces
        run: ./.__rust-workflows__/.github/scripts/cargo-list-workspace-members-ordered

  build:
    name: Build release binaries
    needs:
      - vars
    strategy:
      matrix:
        # Despite the linter warning, this is *not* a string, but a JSON array.
        # noinspection YAMLSchemaValidation
        include: ${{ fromJSON(needs.vars.outputs.targets) }}

    runs-on: ${{ matrix.os }}

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout rust-workflows
        uses: actions/checkout@v4
        with:
          repository: FloGa/rust-workflows
          ref: develop
          path: .__rust-workflows__

      - name: Set environment
        shell: bash
        run: cat ./.github/env >>"$GITHUB_ENV"

      - name: Get latest tag name
        id: get-latest-tag-name
        shell: bash
        run: echo "tag_name=$(git describe --tags --abbrev=0)" | tee -a "$GITHUB_OUTPUT"

      - name: Setup Rust toolchain
        shell: bash
        run: ./.__rust-workflows__/.github/scripts/rust-setup '${{ matrix.target }}'

      - name: Prepare system
        shell: bash
        if: ${{ inputs.system-preparation && (matrix.os != 'ubuntu-latest' || matrix.target == 'x86_64-unknown-linux-gnu') }}
        run: ${{ inputs.system-preparation }} ${{ matrix.os }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2

      - name: Build release
        shell: bash
        env:
          USE_CROSS: ${{ matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu' }}
        run: ./.__rust-workflows__/.github/scripts/rust-compile '${{ matrix.target }}'

      - name: Strip and package artifacts
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
        id: package
        shell: bash
        env:
          MATRIX_TAG: ${{ steps.get-latest-tag-name.outputs.tag_name }}
          MATRIX_TARGET: ${{ matrix.target }}
          MATRIX_OS: ${{ matrix.os }}
        run: ./.__rust-workflows__/.github/scripts/strip-and-package

      - name: Upload artifacts
        if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
        uses: actions/upload-artifact@v3
        with:
          name: ${{ steps.get-latest-tag-name.outputs.tag_name }}
          path: ${{ steps.package.outputs.name_archive }}

  github_release:
    name: Create GitHub release
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    needs:
      - build
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout rust-workflows
        uses: actions/checkout@v4
        with:
          repository: FloGa/rust-workflows
          ref: develop
          path: .__rust-workflows__

      - name: Set environment
        run: cat ./.github/env >>"$GITHUB_ENV"

      - name: Get latest tag name
        id: get-latest-tag-name
        shell: bash
        run: echo "tag_name=$(git describe --tags --abbrev=0)" | tee -a "$GITHUB_OUTPUT"

      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ steps.get-latest-tag-name.outputs.tag_name }}
          path: .__archives__

      - name: Create checksums
        run: ./.__rust-workflows__/.github/scripts/create-checksums

      - name: Create release notes
        run: |
          ./.__rust-workflows__/.github/scripts/changelog-of-version \
            "${{ steps.get-latest-tag-name.outputs.tag_name }}" \
            >RELEASE.md

      - name: Create release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ steps.get-latest-tag-name.outputs.tag_name }}
          files: .__archives__/${{ env.BINARY_NAME }}-*
          body_path: RELEASE.md

  cargo_publish:
    name: Publish package ${{ matrix.workspace }} to creates.io
    if: ${{ github.ref == 'refs/heads/main' || github.ref == 'refs/heads/master' }}
    needs:
      - build
      - vars
    strategy:
      matrix:
        workspace: ${{ fromJSON(needs.vars.outputs.workspaces) }}
      # Limiting parallel runs to 1 is needed to publish the workspaces in the
      # correct order
      max-parallel: 1
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Checkout rust-workflows
        uses: actions/checkout@v4
        with:
          repository: FloGa/rust-workflows
          ref: develop
          path: .__rust-workflows__

      - name: Set environment
        shell: bash
        run: cat ./.github/env >>"$GITHUB_ENV"

      - name: Setup Rust toolchain
        shell: bash
        run: ./.__rust-workflows__/.github/scripts/rust-setup

      - name: Prepare system
        shell: bash
        if: ${{ inputs.system-preparation }}
        run: ${{ inputs.system-preparation }}

      - name: Check if release of ${{ matrix.workspace }} is necessary
        id: check-release-necessary
        shell: bash
        run: ./.__rust-workflows__/.github/scripts/cargo-workspace-release-necessary '${{ matrix.workspace }}'

      - name: Clean rust-workflows helpers
        shell: bash
        run: rm -rfv ./.__rust-workflows__

      - name: Setup Rust cache
        if: ${{ steps.check-release-necessary.outputs.result == 'true' }}
        uses: Swatinem/rust-cache@v2

      - name: Publish package
        if: ${{ steps.check-release-necessary.outputs.result == 'true' }}
        run: cargo publish --token '${{ secrets.CRATES_IO_TOKEN }}' --package '${{ matrix.workspace }}'
